#!/usr/bin/env ruby
# Provision a virtual private server for Kamal deployments on Ubuntu 24 LTS.
# based on the Kamal 2.0 handbook
#
# This script relies on SSH keys authentication.
#
# Make sure to add your private key first:
# % ssh-add ~/.ssh/id_platforme_github

require "net/ssh"
# Kamal requires .env file
`touch .env`
require "kamal"
# Get server IP and user name from config/deploy.yml
config_file = Pathname.new(File.expand_path("config/deploy.yml"))
config = Kamal::Configuration.create_from(config_file: config_file)
hosts = config.roles.map(&:hosts).flatten + config.accessories.map(&:hosts).flatten
hosts.uniq!
user_name = config.ssh.user

# Install essential packages
install_essentials = <<~EOF
apt update;
apt upgrade -y;
apt install -y docker.io curl unattended-upgrades
EOF

# Prepare storage
prepare_storage = <<~EOF
mkdir -p /storage;
chmod 700 /storage;
chown 1000:1000 /storage
EOF

# Add swap space
add_swap = <<~EOF
fallocate -l 2GB /swapfile;
chmod 600 /swapfile;
mkswap /swapfile;
swapon /swapfile;
echo "\\n/swapfile swap swap defaults 0 0\\n" >> /etc/fstab;
sysctl vm.swappiness=20;
echo "\\nvm.swappiness=20\\n" >> /etc/sysctl.conf
EOF

# Install fail2ban
install_fail2ban = <<~EOF
apt install -y fail2ban;
systemctl start fail2ban;
systemctl enable fail2ban
EOF

# configure_fail2ban_wordpress_filter = <<~EOF
# cat <<EOF > /etc/fail2ban/filter.d/wordpress.conf
# [Definition]
# failregex = ^<HOST> .* "(GET|POST) /(xmlrpc\.php|wp-login\.php|wp-admin|wp-content|wp-includes).*"
# ignoreregex =
# EOF
#
# configure_fail2ban_wordpress_jail = <<~EOF
# cat <<EOF > /etc/fail2ban/jail.d/wordpress.conf
# [wordpress]
# enabled = true
# filter = wordpress
# action = iptables-multiport[name=WordPress, port="http,https"]
# logpath = /var/log/nginx/access.log
# findtime = 300
# maxretry = 3
# bantime = 600
# EOF

# Check jail with:
# sudo fail2ban-client status wordpress-scanner

# Configure firewall
configure_firewall = <<~EOF
ufw logging on;
ufw default deny incoming;
ufw default allow outgoing;
ufw allow 22;
ufw allow 80;
ufw allow 443;
ufw --force enable;
systemctl restart ufw
EOF

# Configure logrotate for Docker logs
configure_docker_logrotate = <<~EOF
cat <<EOF > /etc/logrotate.d/docker-logs
/var/lib/docker/containers/*/*.log {
rotate 7
daily
compress
size=100M
missingok
delaycompress
copytruncate
}
EOF

# Add non-root user
add_user = <<~EOF
useradd --create-home #{user_name};
usermod -s /bin/bash #{user_name};
su - #{user_name} -c 'mkdir -p ~/.ssh';
su - #{user_name} -c 'touch ~/.ssh/authorized_keys';
cat /root/.ssh/authorized_keys >> /home/#{user_name}/.ssh/authorized_keys;
chmod 700 /home/#{user_name}/.ssh;
chmod 600 /home/#{user_name}/.ssh/authorized_keys;
echo '#{user_name} ALL=(ALL:ALL) NOPASSWD: ALL' | tee /etc/sudoers.d/#{user_name};
chmod 0440 /etc/sudoers.d/#{user_name};
visudo -c -f /etc/sudoers.d/#{user_name};
usermod -aG docker #{user_name}
EOF

# Disable root
disable_root = <<~EOF
sed -i 's@PasswordAuthentication yes@PasswordAuthentication no@g' /etc/ssh/sshd_config;
sed -i 's@PermitRootLogin yes@PermitRootLogin no@g' /etc/ssh/sshd_config;
systemctl restart ssh
EOF

# Configure unattended upgrades
configure_updates = <<~EOF
echo -e "APT::Periodic::Update-Package-Lists \"1\";\nAPT::Periodic::Unattended-Upgrade
\"1\";\n" > /etc/apt/apt.conf.d/20auto-upgrades;
systemctl restart unattended-upgrades
EOF

hosts.each do |host|
  puts "Provisioning server '#{host}' with user '#{user_name}'..."
  # Run provisioning on server `host`
  Net::SSH.start(host, "root") do |ssh|
    puts "Installing essential packages..."

    ssh.exec!(install_essentials) do |ch, stream, data|
      puts "[#{ch[:host]} : #{stream}] #{data}"
    end
    puts "############## essentials done ##################"

    puts "##############    NEXT STEP    ################"
    puts "Adding swap space..."
    ssh.exec!(add_swap) do |ch, stream, data|
      puts "[#{ch[:host]} : #{stream}] #{data}"
    end
    puts "##############    swap done    ##################"

    puts "##############    NEXT STEP    ################"
    puts "Preparing storage for disk service..."
    ssh.exec!(prepare_storage) do |ch, stream, data|
      puts "[#{ch[:host]} : #{stream}] #{data}"
    end
    puts "##############    disk done    ##################"

    puts "##############    NEXT STEP    ################"
    puts "Adding user with sudo privileges..."
    ssh.exec!(add_user) do |ch, stream, data|
      puts "[#{ch[:host]} : #{stream}] #{data}"
    end
    puts "############## user sudo done  ##################"

    puts "##############    NEXT STEP    ################"
    puts "Installing and running fail2ban..."
    ssh.exec!(install_fail2ban) do |ch, stream, data|
      puts "[#{ch[:host]} : #{stream}] #{data}"
    end
    puts "##############   fail2ban done    ##################"

    # puts "##############    NEXT STEP    ################"
    # puts "Configuring Fail2Ban for WordPress scanning requests..."
    # ssh.exec!(configure_fail2ban_wordpress_filter) do |ch, stream, data|
    #   puts "[#{ch[:host]} : #{stream}] #{data}"
    # end
    # ssh.exec!(configure_fail2ban_wordpress_jail) do |ch, stream, data|
    #   puts "[#{ch[:host]} : #{stream}] #{data}"
    # end
    # ssh.exec!("systemctl restart fail2ban") do |ch, stream, data|
    #   puts "[#{ch[:host]} : #{stream}] #{data}"
    # end
    # puts "############## Fail2Ban WordPress protection done ##################"


    puts "##############    NEXT STEP    ################"
    puts "Configure firewall..."
    ssh.exec!(configure_firewall) do |ch, stream, data|
      puts "[#{ch[:host]} : #{stream}] #{data}"
    end
    puts "##############    firewall done    ##################"

    puts "##############    NEXT STEP    ################"

    puts "Configuring logrotate for Docker logs..."
    ssh.exec!(configure_docker_logrotate) do |ch, stream, data|
      puts "[#{ch[:host]} : #{stream}] #{data}"
    end
    puts "############## logrotate for Docker done ##################"

    puts "##############    NEXT STEP    ################"
    puts "Configure unattended upgrades..."
    ssh.exec!(configure_updates) do |ch, stream, data|
      puts "[#{ch[:host]} : #{stream}] #{data}"
    end
    puts "##############    unattended upgrades done    ##################"

    puts "##############    NEXT STEP    ################"
    puts "Disabling root..."
    ssh.exec!(disable_root) do |ch, stream, data|
      puts "[#{ch[:host]} : #{stream}] #{data}"
    end
    puts "##############    root done    ##################"
  end
end
puts "Done!"
puts "Remember to log in as '#{user_name}' from now on:"
puts " ssh #{user_name}@#{hosts.first}"

puts "If using better stack and you want to forward logs from Docker or other services remember
  to check their setup pages to install vector"
